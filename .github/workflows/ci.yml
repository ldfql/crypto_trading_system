name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./trading_backend

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=75
      env:
        FUTURES_TRADING_ENABLED: "true"
        MAX_LEVERAGE: "125"
        TEST_MODE: "true"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: true

    - name: Store coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 14

    - name: Run linting
      run: |
        ruff check .
        mypy .

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/crypto-trading-pwa

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/crypto-trading-pwa/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test -- --coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/coverage-final.json
        fail_ci_if_error: true

    - name: Build
      run: npm run build

    - name: Store build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dist/
        retention-days: 14

  deploy:
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend-dist

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r trading_backend/requirements.txt

    - name: Validate environment variables
      run: |
        python trading_backend/scripts/verify_env.py
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
        BINANCE_API_SECRET: ${{ secrets.BINANCE_API_SECRET }}
        FUTURES_TRADING_ENABLED: ${{ secrets.FUTURES_TRADING_ENABLED }}
        MAX_LEVERAGE: ${{ secrets.MAX_LEVERAGE }}

    - name: Deploy backend
      run: |
        cd trading_backend
        python -m pip install -e .
        python scripts/verify_ci_config.py
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
        BINANCE_API_SECRET: ${{ secrets.BINANCE_API_SECRET }}
        FUTURES_TRADING_ENABLED: ${{ secrets.FUTURES_TRADING_ENABLED }}
        MAX_LEVERAGE: ${{ secrets.MAX_LEVERAGE }}

    - name: Deploy frontend
      run: |
        # Add your frontend deployment commands here (e.g., using AWS S3, Netlify, or your preferred static hosting)
        echo "Deploying frontend from frontend-dist/"
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
